barcodes = fread(glue('{pu_dir}/cellSNP.samples.tsv'), header = F)$V1
# convert to data frame
DP = as.data.frame(Matrix::summary(DP)) %>%
mutate(
cell = barcodes[j],
snp_id = vcf_pu$snp_id[i]
) %>%
select(-i, -j) %>%
rename(DP = x) %>%
select(cell, snp_id, DP)
AD = as.data.frame(Matrix::summary(AD)) %>%
mutate(
cell = barcodes[j],
snp_id = vcf_pu$snp_id[i]
) %>%
select(-i, -j) %>%
rename(AD = x) %>%
select(cell, snp_id, AD)
df_allele = DP %>% left_join(AD, by = c("cell", "snp_id")) %>%
mutate(AD = ifelse(is.na(AD), 0, AD))
# attach genotype info
df_allele = df_allele %>% inner_join(
vcf_phased %>% select(snp_id, CHROM, POS, REF, ALT, GT, cM),
by = 'snp_id')
### Set up normal matrix
count_mat = readMM('~/Projects/ConfettiMiceProject/scRNAseq/4282/fbm/ref/matrix.mtx')
### Set up normal matrix
count_mat = readMM('~/Projects/ConfettiMiceProject/scRNAseq/4282/fbm/ref/matrix.mtx')
cells = fread('~/Projects/ConfettiMiceProject/scRNAseq/4282/fbm/ref/barcodes.tsv', header = F)$V1
genes = fread('~/Projects/ConfettiMiceProject/scRNAseq/4282/fbm/ref/features.tsv', header = F)$V2
colnames(count_mat) = cells
rownames(count_mat) = genes
count_mat = as.matrix(count_mat)
count_mat = rowsum(count_mat, rownames(count_mat))
count_mat = as(count_mat, "dgCMatrix")
count_mat_ref = count_mat
p2 = pagoda2::basicP2proc(count_mat_ref, n.cores = 6)
clusters = p2$clusters$PCA$multilevel
ref_annot = data.frame(
cell = names(clusters),
group = unname(clusters)
)
count_mat_ref = numbat::aggregate_counts(
count_mat_ref,
ref_annot %>% group_by(group) %>% filter(n() > 10)
)
### Set up tumor matrix
count_mat = readMM('~/Projects/ConfettiMiceProject/scRNAseq/4282/fbm/sample/matrix.mtx')
cells = fread('~/Projects/ConfettiMiceProject/scRNAseq/4282/fbm/sample/barcodes.tsv', header = T)$V1
cells = fread('~/Projects/ConfettiMiceProject/scRNAseq/4282/fbm/sample/barcodes.tsv', header = T)$V1
cells = fread('~/Projects/ConfettiMiceProject/scRNAseq/4282/fbm/sample/barcodes.tsv', header = T)
View(cells)
cells = fread('~/Projects/ConfettiMiceProject/scRNAseq/4282/fbm/sample/barcodes.tsv', header = F)
cells = fread('~/Projects/ConfettiMiceProject/scRNAseq/4282/fbm/sample/barcodes.tsv', header = F)$V1
genes = fread('~/Projects/ConfettiMiceProject/scRNAseq/4282/fbm/sample/features.tsv', header = F)$V2
colnames(count_mat) = cells
rownames(count_mat) = genes
count_mat = as.matrix(count_mat)
count_mat = rowsum(count_mat, rownames(count_mat))
count_mat = as(count_mat, "dgCMatrix")
count_mat_tumor = count_mat
### Run numbat
run_numbat(
count_mat_tumor,
count_mat_ref,
df_allele,
t = 1e-5,
ncores = 6,
skip_nj = TRUE,
min_LLR = 30,
max_iter = 5,
out_dir = '~/Projects/ConfettiMiceProject/scRNAseq/4282/results/671_sites',
# mouse specific settings
genome = "mm10",
nu = 0
)
library(dplyr)
library(data.table)
library(stringr)
library(glue)
library(Matrix)
library(numbat)
vcf_pu = fread(glue('~/Projects/ConfettiMiceProject/S_Pool2.sites.vcf'))
View(vcf_pu)
S_Pool_sites = vcf_pu
remove(vcf_pu)
View(S_Pool_sites)
S_Pool_sites$S_Pool
S_Pool_sites$S_Pool="1/0"
write.vcf(S_Pool_sites, file = "~/Projects/ConfettiMiceProject/S_Pool2.sites.vcf", mask = FALSE, APPEND = FALSE)
library(vcfR)
write.vcf(S_Pool_sites, file = "~/Projects/ConfettiMiceProject/S_Pool2.sites.vcf", mask = FALSE, APPEND = FALSE)
class(S_Pool_sites)
View(S_Pool_sites)
vcf <- read.vcfR('~/Projects/ConfettiMiceProject/S_Pool2.sites.vcf', verbose = FALSE )
vcf <- read.vcfR('~/Projects/ConfettiMiceProject/S_Pool2.sites_copy.vcf.gz', verbose = FALSE )
vcf <- read.vcfR('~/Projects/ConfettiMiceProject/S_Pool.sites_copy.vcf.gz', verbose = FALSE )
View(vcf)
vcf@gt
vcf@gt[,"Pool"]
vcf@gt["Pool"]
vcf@gt["Pool",]
vcf@gt[,2]
vcf@gt[,2]="1/0"
vcf@gt
tail(vcf@gt)
write.vcf
write.vcf(vcf, "~/Projects/ConfettiMiceProject/S_Pool.sites.vcf")
View(vcf)
vcf <- read.vcfR('~/Projects/ConfettiMiceProject/S_Pool.sites.vcf.gz', verbose = FALSE )
View(vcf)
vcf@gt
write.vcf(vcf, "~/Projects/ConfettiMiceProject/S_Pool.sites.vcf.gz")
library(dplyr)
library(data.table)
library(stringr)
library(glue)
library(Matrix)
library(numbat)
library(dplyr)
options(java.parameters = "-Xmx7g")
library(ggplot2)
library(ggsignif)
library(graphics)
library(matlab)
library(DBI)
library(xtable)
library(egg)
library(AUCell)
library(xlsx)
library(growthrates)
library(purrr)
library(ggbreak)
library(dplyr)
library(tidyr)
setwd('~/Repositories/densityDependentSelection/code')
source('getGrowthModel.R')
source('utils.R')
lineages = sort(c("NUGC-4_A4_seed","NCI-N87_A59_seed","HGC-27_A22_seed","KATOIII_A6_seed","SNU-668_A9_seed" ,"MKN-45_A4_seed","SNU-638_A4_seed","SNU-601_A4_seed"));
cellLines = gsub("\\_.*","",lineages)
cellLinePairs = t(combn(unique(cellLines), 2))
modelTypes = list(Logistic = grow_logistic)
rSquares = matrix(NA, length(modelTypes), length(lineages), dimnames = list(names(modelTypes), lineages))
fits = list()
for (lineage in lineages) {
tmp =try(getGrowthModel(lineage,modelTypes[["Logistic"]]))
tmp$type = "Logistic"
fits[[lineage]] = tmp
targetDate = sort(as.POSIXct(tmp$out$date), decreasing=F)[round(nrow(tmp$out)*0.25)]
rSquares["Logistic", lineage] = tmp$adjr2
}
fitSummaryTable = data.frame(matrix(NA, nrow = length(lineages), ncol = 3, dimnames = list(lineages, c("r", "K", "adjutedRSquared"))))
fitSummaryTable$adjutedRSquared=sapply(lineages, function(x) round(max(rSquares[,x]), 4))
fitSummaryTable$r=sapply(lineages, function(x) round(fits[[x]]$modelsum@par["mumax"],2))
fitSummaryTable$K=sapply(lineages, function(x) round(fits[[x]]$modelsum@par["K"]))
fitSummaryTable$cellLine = gsub("\\_.*", "", rownames(fitSummaryTable))
rownames(fitSummaryTable) = fitSummaryTable$cellLine
colnames(rSquares) = sapply(strsplit(colnames(rSquares), "_"), "[[", 1)
print("Goodness of fit per cell line:")
print(rSquares)
fitSummaryTable$adjutedRSquared
View(fitSummaryTable)
fitSummaryTable[,3:4]
fitSummaryTable[,3]
fitSummaryTable[,1:3]
lineages = sort(c("NUGC-4_A4_seed","NCI-N87_A59_seed","HGC-27_A22_seed","KATOIII_A6_seed","SNU-668_A9_seed" ,"MKN-45_A4_seed","SNU-638_A4_seed","SNU-601_A4_seed"));
cellLines = gsub("\\_.*","",lineages)
cellLinePairs = t(combn(unique(cellLines), 2))
modelTypes = list(Logistic = grow_logistic)
# rSquares = matrix(NA, length(modelTypes), length(lineages), dimnames = list(names(modelTypes), lineages))
fits = list()
for (lineage in lineages) {
tmp =try(getGrowthModel(lineage,modelTypes[["Logistic"]]))
tmp$type = "Logistic"
fits[[lineage]] = tmp
targetDate = sort(as.POSIXct(tmp$out$date), decreasing=F)[round(nrow(tmp$out)*0.25)]
# rSquares["Logistic", lineage] = tmp$adjr2
}
fitSummaryTable = data.frame(matrix(NA, nrow = length(lineages), ncol = 3, dimnames = list(lineages, c("r", "K", "adjutedRSquared"))))
fitSummaryTable$adjutedRSquared=sapply(lineages, function(x) round(max(rSquares[,x]), 4))
lineages = sort(c("NUGC-4_A4_seed","NCI-N87_A59_seed","HGC-27_A22_seed","KATOIII_A6_seed","SNU-668_A9_seed" ,"MKN-45_A4_seed","SNU-638_A4_seed","SNU-601_A4_seed"));
cellLines = gsub("\\_.*","",lineages)
cellLinePairs = t(combn(unique(cellLines), 2))
modelTypes = list(Logistic = grow_logistic)
rSquares = matrix(NA, length(modelTypes), length(lineages), dimnames = list(names(modelTypes), lineages))
fits = list()
for (lineage in lineages) {
tmp =try(getGrowthModel(lineage,modelTypes[["Logistic"]]))
tmp$type = "Logistic"
fits[[lineage]] = tmp
targetDate = sort(as.POSIXct(tmp$out$date), decreasing=F)[round(nrow(tmp$out)*0.25)]
rSquares["Logistic", lineage] = tmp$adjr2
}
fitSummaryTable = data.frame(matrix(NA, nrow = length(lineages), ncol = 3, dimnames = list(lineages, c("r", "K", "adjutedRSquared"))))
fitSummaryTable$adjutedRSquared=sapply(lineages, function(x) round(max(rSquares[,x]), 4))
fitSummaryTable$r=sapply(lineages, function(x) round(fits[[x]]$modelsum@par["mumax"],2))
fitSummaryTable$K=sapply(lineages, function(x) round(fits[[x]]$modelsum@par["K"]))
fitSummaryTable$cellLine = gsub("\\_.*", "", rownames(fitSummaryTable))
rownames(fitSummaryTable) = fitSummaryTable$cellLine
# colnames(rSquares) = sapply(strsplit(colnames(rSquares), "_"), "[[", 1)
# print("Goodness of fit per cell line:")
# print(rSquares)
fitSummaryTable[,1:3]
lineages = sort(c("NUGC-4_A4_seed","NCI-N87_A59_seed","HGC-27_A22_seed","KATOIII_A6_seed","SNU-668_A9_seed" ,"MKN-45_A4_seed","SNU-638_A4_seed","SNU-601_A4_seed"));
cellLines = gsub("\\_.*","",lineages)
cellLinePairs = t(combn(unique(cellLines), 2))
modelTypes = list(Logistic = grow_logistic)
rSquares = matrix(NA, length(modelTypes), length(lineages), dimnames = list(names(modelTypes), lineages))
fits = list()
for (lineage in lineages) {
tmp =try(getGrowthModel(lineage,modelTypes[["Logistic"]]))
tmp$type = "Logistic"
fits[[lineage]] = tmp
targetDate = sort(as.POSIXct(tmp$out$date), decreasing=F)[round(nrow(tmp$out)*0.25)]
rSquares["Logistic", lineage] = tmp$adjr2
}
fitSummaryTable = data.frame(matrix(NA, nrow = length(lineages), ncol = 3, dimnames = list(lineages, c("r", "K", "adjutedRSquared"))))
fitSummaryTable$adjutedRSquared=sapply(lineages, function(x) round(max(rSquares[,x]), 4))
fitSummaryTable$r=sapply(lineages, function(x) round(fits[[x]]$modelsum@par["mumax"],2))
fitSummaryTable$K=sapply(lineages, function(x) round(fits[[x]]$modelsum@par["K"]))
fitSummaryTable$cellLine = gsub("\\_.*", "", rownames(fitSummaryTable))
rownames(fitSummaryTable) = fitSummaryTable$cellLine
# colnames(rSquares) = sapply(strsplit(colnames(rSquares), "_"), "[[", 1)
# print("Goodness of fit per cell line:")
# print(rSquares)
as.numeric(fitSummaryTable[,1:4])
lineages = sort(c("NUGC-4_A4_seed","NCI-N87_A59_seed","HGC-27_A22_seed","KATOIII_A6_seed","SNU-668_A9_seed" ,"MKN-45_A4_seed","SNU-638_A4_seed","SNU-601_A4_seed"));
cellLines = gsub("\\_.*","",lineages)
cellLinePairs = t(combn(unique(cellLines), 2))
modelTypes = list(Logistic = grow_logistic)
rSquares = matrix(NA, length(modelTypes), length(lineages), dimnames = list(names(modelTypes), lineages))
fits = list()
for (lineage in lineages) {
tmp =try(getGrowthModel(lineage,modelTypes[["Logistic"]]))
tmp$type = "Logistic"
fits[[lineage]] = tmp
targetDate = sort(as.POSIXct(tmp$out$date), decreasing=F)[round(nrow(tmp$out)*0.25)]
rSquares["Logistic", lineage] = tmp$adjr2
}
fitSummaryTable = data.frame(matrix(NA, nrow = length(lineages), ncol = 3, dimnames = list(lineages, c("r", "K", "adjutedRSquared"))))
fitSummaryTable$adjutedRSquared=sapply(lineages, function(x) round(max(rSquares[,x]), 4))
fitSummaryTable$r=sapply(lineages, function(x) round(fits[[x]]$modelsum@par["mumax"],2))
fitSummaryTable$K=sapply(lineages, function(x) round(fits[[x]]$modelsum@par["K"]))
fitSummaryTable$cellLine = gsub("\\_.*", "", rownames(fitSummaryTable))
rownames(fitSummaryTable) = fitSummaryTable$cellLine
# colnames(rSquares) = sapply(strsplit(colnames(rSquares), "_"), "[[", 1)
# print("Goodness of fit per cell line:")
# print(rSquares)
print(fitSummaryTable[,1:4])
class(fitSummaryTable$r)
class(fitSummaryTable$K)
class(fitSummaryTable$adjutedRSquared)
lineages = sort(c("NUGC-4_A4_seed","NCI-N87_A59_seed","HGC-27_A22_seed","KATOIII_A6_seed","SNU-668_A9_seed" ,"MKN-45_A4_seed","SNU-638_A4_seed","SNU-601_A4_seed"));
cellLines = gsub("\\_.*","",lineages)
cellLinePairs = t(combn(unique(cellLines), 2))
modelTypes = list(Logistic = grow_logistic)
rSquares = matrix(NA, length(modelTypes), length(lineages), dimnames = list(names(modelTypes), lineages))
fits = list()
for (lineage in lineages) {
tmp =try(getGrowthModel(lineage,modelTypes[["Logistic"]]))
tmp$type = "Logistic"
fits[[lineage]] = tmp
targetDate = sort(as.POSIXct(tmp$out$date), decreasing=F)[round(nrow(tmp$out)*0.25)]
rSquares["Logistic", lineage] = tmp$adjr2
}
fitSummaryTable = data.frame(matrix(NA, nrow = length(lineages), ncol = 3, dimnames = list(lineages, c("r", "K", "adjutedRSquared"))))
fitSummaryTable$adjutedRSquared=sapply(lineages, function(x) round(max(rSquares[,x]), 4))
fitSummaryTable$r=sapply(lineages, function(x) round(fits[[x]]$modelsum@par["mumax"],2))
fitSummaryTable$K=sapply(lineages, function(x) round(fits[[x]]$modelsum@par["K"]))
fitSummaryTable$cellLine = gsub("\\_.*", "", rownames(fitSummaryTable))
rownames(fitSummaryTable) = fitSummaryTable$cellLine
# colnames(rSquares) = sapply(strsplit(colnames(rSquares), "_"), "[[", 1)
# print("Goodness of fit per cell line:")
# print(rSquares)
as.numeric(fitSummaryTable[,1:3])
fitSummaryTable
rownames(fitSummaryTable)
colnames(fitSummaryTable)
fitSummaryTable[,1:3]
lineages = sort(c("NUGC-4_A4_seed","NCI-N87_A59_seed","HGC-27_A22_seed","KATOIII_A6_seed","SNU-668_A9_seed" ,"MKN-45_A4_seed","SNU-638_A4_seed","SNU-601_A4_seed"));
cellLines = gsub("\\_.*","",lineages)
cellLinePairs = t(combn(unique(cellLines), 2))
modelTypes = list(Logistic = grow_logistic)
rSquares = matrix(NA, length(modelTypes), length(lineages), dimnames = list(names(modelTypes), lineages))
fits = list()
for (lineage in lineages) {
tmp =try(getGrowthModel(lineage,modelTypes[["Logistic"]]))
tmp$type = "Logistic"
fits[[lineage]] = tmp
targetDate = sort(as.POSIXct(tmp$out$date), decreasing=F)[round(nrow(tmp$out)*0.25)]
rSquares["Logistic", lineage] = tmp$adjr2
}
fitSummaryTable = data.frame(matrix(NA, nrow = length(lineages), ncol = 3, dimnames = list(lineages, c("r", "K", "adjutedRSquared"))))
fitSummaryTable$adjutedRSquared=sapply(lineages, function(x) round(max(rSquares[,x]), 4))
fitSummaryTable$r=sapply(lineages, function(x) round(fits[[x]]$modelsum@par["mumax"],2))
fitSummaryTable$K=sapply(lineages, function(x) round(fits[[x]]$modelsum@par["K"]))
fitSummaryTable$cellLine = gsub("\\_.*", "", rownames(fitSummaryTable))
rownames(fitSummaryTable) = fitSummaryTable$cellLine
fitSummaryTable[,1:3]
options(java.parameters = "-Xmx7g")
library(ggplot2)
library(ggsignif)
library(graphics)
library(matlab)
library(DBI)
library(xtable)
library(egg)
library(AUCell)
library(xlsx)
library(growthrates)
library(purrr)
library(ggbreak)
library(dplyr)
library(tidyr)
setwd('~/Repositories/densityDependentSelection/code')
source('getGrowthModel.R')
source('utils.R')
lineages = sort(c("NUGC-4_A4_seed","NCI-N87_A59_seed","HGC-27_A22_seed","KATOIII_A6_seed","SNU-668_A9_seed" ,"MKN-45_A4_seed","SNU-638_A4_seed","SNU-601_A4_seed"));
cellLines = gsub("\\_.*","",lineages)
cellLinePairs = t(combn(unique(cellLines), 2))
modelTypes = list(Logistic = grow_logistic)
rSquares = matrix(NA, length(modelTypes), length(lineages), dimnames = list(names(modelTypes), lineages))
fits = list()
for (lineage in lineages) {
tmp =try(getGrowthModel(lineage,modelTypes[["Logistic"]]))
tmp$type = "Logistic"
fits[[lineage]] = tmp
targetDate = sort(as.POSIXct(tmp$out$date), decreasing=F)[round(nrow(tmp$out)*0.25)]
rSquares["Logistic", lineage] = tmp$adjr2
}
fitSummaryTable = data.frame(matrix(NA, nrow = length(lineages), ncol = 3, dimnames = list(lineages, c("r", "K", "adjutedRSquared"))))
fitSummaryTable$adjutedRSquared=sapply(lineages, function(x) round(max(rSquares[,x]), 4))
fitSummaryTable$r=sapply(lineages, function(x) round(fits[[x]]$modelsum@par["mumax"],2))
fitSummaryTable$K=sapply(lineages, function(x) round(fits[[x]]$modelsum@par["K"]))
fitSummaryTable$cellLine = gsub("\\_.*", "", rownames(fitSummaryTable))
rownames(fitSummaryTable) = fitSummaryTable$cellLine
fitSummaryTable[,1:3]
# Find x-axis range need to accommodate all fits
maxDay = max(unlist(sapply(fits, function(x) x$modelsum@obs$time)))
x = seq(0, maxDay, by = 0.01)
# Extract our y-values from fits
ggplotGrowthCurves = lapply(fits, function(v) y = (v$modelsum@par["K"] * v$modelsum@par["y0"])/(v$modelsum@par["y0"] + (v$modelsum@par["K"] - v$modelsum@par["y0"]) * exp(-v$modelsum@par["mumax"] * x)))
# Shift plots along the x-axis so that they cross x=0 at their max growth rate
medians = sapply(ggplotGrowthCurves, function(x) median(0:max(na.omit(x))))
diffVals = sapply(names(fits), function(x) abs(ggplotGrowthCurves[[x]] - medians[[x]]))
daysToSubtract = apply(diffVals, 2, function(v) x[which.min(v)])
# Setup colors so that it is consistent across all plots
dd.col = RColorBrewer::brewer.pal(length(cellLines),"Paired");
names(dd.col) = cellLines
# Grab (x,y) coords for all cell line growth data and store in 'ggplotGrowthDataPoints'
ggplotGrowthDataPoints = list()
for (name in names(fits)){
ggplotGrowthDataPoints[[name]] = fits[[name]]$modelsum@obs$time-daysToSubtract[[name]]
}
ggplotGrowthDataPoints = round(as.data.frame(unlist(ggplotGrowthDataPoints)),2)
names(ggplotGrowthDataPoints) = "xPoints"
ggplotGrowthDataPoints$yPoints = unlist(lapply(names(fits), function(x) fits[[x]]$modelsum@obs$y))
ggplotGrowthDataPoints$CL = gsub("\\_.*","",rownames(ggplotGrowthDataPoints))
# Rename daysToSubtract to match cell lines and populate ggplotGrowthCurves with shifted x-values (ggplotGrowthCurves$newDays)
names(daysToSubtract) = gsub("\\_.*","",names(daysToSubtract))
ggplotGrowthCurves = as.data.frame(unlist(ggplotGrowthCurves))
names(ggplotGrowthCurves) = "y"
ggplotGrowthCurves$CL = gsub("\\_.*","",rownames(ggplotGrowthCurves))
ggplotGrowthCurves$x = repmat(x,1)
ggplotGrowthCurves$newDays=unlist(lapply(unique(ggplotGrowthCurves$CL), function(z) ggplotGrowthCurves[ggplotGrowthCurves$CL==z, "x"]-daysToSubtract[z]))
# here we adjust the ggplotGrowthCurves so that each curve will end at the last data point for that cell line
# above when we find the ggplotGrowthCurves they are all solved over same timespan - this loop gives them all unique x-axes
# it makes them look nicer, this is an aesthetic change only
adjuster = list()
for(CL in cellLines){
daCutOff = max(ggplotGrowthDataPoints[ggplotGrowthDataPoints$CL==CL, "xPoints"])
tmp = ggplotGrowthCurves[ggplotGrowthCurves$newDays<=daCutOff, ]
tmp = tmp[tmp$CL==CL,]
adjuster[[CL]] = tmp
}
ggplotGrowthCurves = adjuster %>% map_df(~rbind(.x), .id = 'CL')
# Create data frame to pass through to ggplot that contains ggplotGrowthCurves and points
dfT = list(df1 = ggplotGrowthCurves, df2 = ggplotGrowthDataPoints) %>%
map_df(~rbind(.x), .id = 'df')
ggplot(data=dfT, aes(x=newDays, y=y, color=CL)) +
geom_line(size=2) + geom_point(aes(x=xPoints, y=yPoints), size=4) + scale_color_manual(values=dd.col) +
scale_y_log10() + xlab("Time (days)") + ylab("Cell count") + theme_minimal() +
theme(axis.text = element_text(size = 14), axis.title = element_text(size = 18), legend.position="none")
pairs = teList = cellCycleClones = list()
list.files("../data/auCellObjects")
getwd()
setwd('~/Repositories/densityDependentSelection/code')
list.files("../data/auCellObjects")
length(list.files("../data/auCellObjects"))
length(list.files("../data/auCellObjects"))<4
source('utils.R')
remove(getStats4ParamFit())
remove(getStats4ParamFit
)
source('utils.R')
# Call out to AUCell and get pathway activity
if(length(list.files("../data/auCellObjects"))<4){
for(state in c("S","G0G1","G2M","all")){
uList = getTranscriptomeData(cellLines, ccstate = state)
save(file=paste0("../data/auCellObjects/uList_",state,".RObj"), "uList")
}
}
# Set up list containing a pathway per r/K parameter
inputList = list("K"= "Arginine and proline metabolism", "r" = "Amoebiasis")
axesTitleList = list("K"= "Carrying capacity (K)", "r" = "Growth rate (r)")
# Define function to calculate Rsquared and other stats for model fits for a given growth parameter
# getStats4ParamFit<-function(param,uList,poi,verbose=T){
#   ppCL=grpstats(t(uList$pathways), uList$clMembership, "median")$median[cellLines,]
#   depVar = as.numeric(fitSummaryTable[rownames(ppCL),param])
#   if(param == "K"){
#     depVar = log(depVar)
#   }
#   te=sapply(colnames(ppCL), function(x) lm(depVar~indepVar1, data=data.frame(indepVar1 = ppCL[,x])), simplify = F)
#   te=te[poi$KEGG.Pathway]
#
#   # get p-value for linear models
#   pvals=sapply(names(te), function(x) lmp(te[[x]]))
#   names(pvals)=gsub("\\.value*", "", names(pvals))
#   model = te[[which.min(pvals)]]
#   # get pearson's correlation for each pathway
#   pearson=sapply(names(te), function(x) cor.test(ppCL[,x], as.numeric(fitSummaryTable[rownames(ppCL),param]))$estimate)
#   names(pearson)=gsub("\\.cor*", "", names(pvals))
#   # gather it all together
#   te = as.data.frame(sapply(te, function(x) summary(x)$adj.r.squared))
#   names(te) = "adj.r.squared"
#   te$p.value = pvals[rownames(te)]
#   te$pearson = pearson[rownames(te)]
#   te=te[order(te$p.value),]
#   if(verbose){
#     print(param)
#     print(head(te[1:5,]))
#   }
#   return(list(te=te, model=model))
# }
# Compare pathways from hela paper to growth parameters:
poi=read.xlsx("../data/pathways/TableS2andS3_HelaPaper.xlsx",sheetName =  "LowDensity")
subpopGrowthParams = list()
pairs = teList = cellCycleClones = list()
maxPval=0.1
mapSigLevel = c("***"=0.001, "**"=0.01, "*"=0.05, "o"=0.1)
for(param in names(inputList)){
teList_ = list()
for(state in c("S","G0G1","G2M", "all")){
# load CC specific uList:
load(file=paste0("../data/auCellObjects/uList_",state,".RObj"))
teList_[[state]]=getStats4ParamFit(param,uList,poi, verbose=F)$te
}
teList[[param]]=do.call(rbind,teList_)
# Choose cell cycle state with best model performance for this param:
teList_=sapply(teList_, function(x) x[1,])
state=colnames(teList_)[which.max(teList_[1,])]
load(file=paste0("../data/auCellObjects/uList_",state,".RObj"))
print(paste("Best fit for",param, "is for",state,"cells"))
out =getStats4ParamFit(param,uList,poi)
model = out$model
# Build mapping of clones to cell lines
clonesToCellLinesMap = as.data.frame(plyr::count(paste(uList$cloneMembership, uList$clMembership)))
clonesToCellLinesMap = clonesToCellLinesMap %>% separate(x, c('clone', 'cellLine'), sep = " ")
rownames(clonesToCellLinesMap) = clonesToCellLinesMap$clone
clonesToCellLinesMap$ratio=sapply(clonesToCellLinesMap$clone, function(x) clonesToCellLinesMap[clonesToCellLinesMap$clone==x, "freq"]/sum(clonesToCellLinesMap[clonesToCellLinesMap$cellLine==clonesToCellLinesMap[clonesToCellLinesMap$clone==x,"cellLine"],"freq"]))
# model predictions
scDat=data.frame(indepVar1 = uList$pathways[inputList[[param]],])
predVar = predict(model, scDat)
if(param == "K"){
predVar = exp(predVar)
}
ii = which(predVar>0.1);
print(paste(round(100-100*length(ii)/length(predVar),2),"% predicted datapoints have values <0 and were excluded"))
## set up data frame to use in ggplot
scDat$prediction = predVar
scDat$clone = uList$cloneMembership
subpopGrowthParams[[param]] = as.data.frame(grpstats(as.matrix(scDat$prediction), as.matrix(scDat$clone), "median"))
scDat$cellLine = uList$clMembership
# get plot order for clones
scDat = getPathwayActivityRanksAcrossCellLines(scDat)
compsList = getLargestSignificantPair(scDat, clonesToCellLinesMap,cellLinePairs,maxOnly = T, maxPval = maxPval)
list2env(compsList, .GlobalEnv)
remove(compsList)
sI = 0.08
if(param=="K"){
sI = 1.4
}
g2 = ggplot(scDat, aes(x = reorder(clone, PL_rank), y = prediction,fill = cellLine)) +
scale_fill_manual("Legend", values = dd.col) +
geom_violin() +
geom_signif(data=scDat,comparisons = subpopComps$clones, map_signif_level = mapSigLevel,step_increase=sI, test = "t.test",margin_top = 0.9) +    stat_summary(fun = median,geom = "point",size = 2,color = "black") +
ylab(axesTitleList[param]) + xlab(NULL) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1,size = 14),axis.text.y = element_text(size = 12), legend.position = "none", axis.title = element_text(size = 18))
if(param=="K"){
g2 = g2 + coord_trans( y = "log10");
}
print(g2)
# produce parameter over biomarker plot
fitSummaryTable$biomarkerActivity = as.data.frame(grpstats(as.matrix(uList$pathways[inputList[[param]],]), uList$clMembership, "median"))[rownames(fitSummaryTable),]
fitSummaryTable$parameterValue = fitSummaryTable[,param]
fitSummaryTable$mad=sapply(fitSummaryTable$cellLine, function(x) mad(scDat[scDat$cellLine==x, "indepVar1"]))
gg1 = ggplot(fitSummaryTable, aes(x=parameterValue, y=biomarkerActivity, group = cellLine, color = cellLine)) +
scale_color_manual("Legend", values = dd.col) +
geom_line() +
geom_point(size=9, shape=c(16,16,10,16,16,10,10,16)) +
geom_errorbar(aes(ymin=biomarkerActivity-mad, ymax=biomarkerActivity+mad)) +
xlab(axesTitleList[param]) + ylab(inputList[[param]]) + theme_minimal() + theme(axis.title = element_text(size = 18), axis.text = element_text(size = 14), legend.position = "none")
if(param=="K"){
gg1 = gg1 + scale_x_log10()
}
print(gg1)
# gather pairs of clones with significant difference
compsList = getLargestSignificantPair(scDat, clonesToCellLinesMap,cellLinePairs,maxPval=0.1,maxOnly = F)
pairs[[param]]=compsList$subpopComps
colnames(pairs[[param]])=paste0(param,"_",colnames(pairs[[param]]))
}
